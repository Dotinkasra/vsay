name: Build and Release 

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Install build dependencies (Linux)
        run: |
          sudo apt-get update
          sudo apt-get install -y binutils-gold g++ gcc libasound2-dev

      - name: Build Linux ${{ matrix.goarch }}
        env:
          GOOS: linux
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1 # LinuxではCGOを有効にする
        run: |
          OUTPUT_NAME="vsay-linux-${{ matrix.goarch }}"
          go build -v -o "${OUTPUT_NAME}" ./cmd/vsay/main.go

      - name: Archive build artifact (Linux ${{ matrix.goarch }})
        run: |
          OUTPUT_NAME="vsay-linux-${{ matrix.goarch }}"
          tar -czf "${OUTPUT_NAME}.tar.gz" "${OUTPUT_NAME}"

      - name: Upload artifact (Linux ${{ matrix.goarch }})
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.goarch }}
          path: vsay-linux-${{ matrix.goarch }}*.tar.gz

  build-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        goarch: [amd64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Build macOS ${{ matrix.goarch }}
        env:
          GOOS: darwin
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 1 # macOSではCGOを有効にする
        run: |
          OUTPUT_NAME="vsay-darwin-${{ matrix.goarch }}"
          go build -v -o "${OUTPUT_NAME}" ./cmd/vsay/main.go

      - name: Archive build artifact (macOS ${{ matrix.goarch }})
        run: |
          OUTPUT_NAME="vsay-darwin-${{ matrix.goarch }}"
          tar -czf "${OUTPUT_NAME}.tar.gz" "${OUTPUT_NAME}"

      - name: Upload artifact (macOS ${{ matrix.goarch }})
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.goarch }}
          path: vsay-darwin-${{ matrix.goarch }}*.tar.gz

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: 'go.mod'

      - name: Build Windows amd64
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 1 # WindowsではCGOを有効にする
        run: |
          $OUTPUT_NAME="vsay-windows-amd64.exe"
          go build -v -o "$OUTPUT_NAME" ./cmd/vsay/main.go

      - name: Archive build artifact (Windows amd64)
        run: |
          $OUTPUT_NAME="vsay-windows-amd64.exe"
          tar -czf "${OUTPUT_NAME}.tar.gz" "$OUTPUT_NAME"

      - name: Upload artifact (Windows amd64)
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: vsay-windows-amd64.exe*.tar.gz

  release:
    needs: [build-linux, build-macos, build-windows] 
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        run: |
          gh release create ${{ github.ref_name }} --generate-notes artifacts/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}